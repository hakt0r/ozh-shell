#!/bin/sh

_copyright(){ echo "
  ozh lightweight shell extensions
  2008-2014 - anx @ ulzq de (Sebastian Glaser)
  Licensed under GNU GPL v3"; }
_license(){ echo "
  ozh is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2, or (at your option)
  any later version.

  ozh is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this software; see the file COPYING.  If not, write to
  the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
  Boston, MA 02111-1307 USA

  http://www.gnu.org/licenses/gpl.html"; }

_apt(){
  #  type rehash       >/dev/null 2>&1 && rehash
  #  type zol_gen_path >/dev/null 2>&1 && rehash; }

  local apt_available=false
  local apt_metalink=false
  local apt_aptitude=false
  local apt_fast=false
  local get=apt-get
  local run=apt-get
  local sudo=

  which apt-get      >/dev/null 2>/dev/null && { apt=apt-get;      apt_available=true; }
  which apt          >/dev/null 2>/dev/null && { apt=apt; get=apt; run=apt; }
  which apt-fast     >/dev/null 2>/dev/null && { apt=apt-fast;     apt_fast=true; }
  which apt-metalink >/dev/null 2>/dev/null && { apt=apt-metalink; apt_metalink=true; }
  which sudo         >/dev/null 2>/dev/null && { test "$USER" = "root" || sudo=sudo; }
  if $apt_available; then
    $apt_metalink && { run=apt-metalink; }
    eval "
      unset agi acs acp acsh adg agar agp agr agu agug asu asu
      agi(){ $sudo $run install \$@; oz hook run apt/postinstall 'agi::done' \"\$@\"; }
      acs(){ $run search \$@; }
      acp(){ apt-cache policy \$@; }
      acsh(){ $run show \$@; }
      adg(){ $sudo $get update; $sudo $run dist-upgrade \$@; }
      agar(){ $sudo $run autoremove \$@; }
      agp(){ $sudo $run purge \$@; }
      agr(){ $sudo $run remove \$@; }
      agu(){ $sudo $run update \$@; }
      agug(){ $sudo $get update; $sudo $run upgrade \$@; }
      asu(){ $sudo $get update \$@; }
      asu(){ $sudo $get update; $sudo $run -y safe-upgrade \$@; }
    "; fi; }

app_depend(){
  app_exists $1 && return 0
  if [ -x "$(which $1 2>/dev/null)" ]; then return 0 # exists
  elif echo "$(which $1 2>/dev/null)" | Bgrep -q aliased; then return 0 # exists
  elif is_function $1; then return 0 # builtin
  else
    sudo=''
    if [ $USER != "root" ];then
      printf "DEPENDENCY $1 to install provide "
      sudo printf ""; echo
      sudo='sudo'
    fi
    _task "installing $1"
    if os_x; then printf "$bred$white$bold add osx support... "; _fail;return 1;
    elif os_ubuntu; then $sudo apt-get install -y $1  2>&1 >/dev/null && _done || _fail; rehash; return 0
    elif os_debian; then $sudo apt-get install -y $1  2>&1 >/dev/null && _done || _fail; rehash; return 0
    elif os_ios; then    $sudo apt-get install -e $1  2>&1 >/dev/null && _done || _fail; rehash; return 0
    elif os_mcx || os_tinycore; then
      if [ $(whoami) = "root" ]; then
        sudo -u $TC_USER tce-load -wi $1 2>&1 >/dev/null && _done || _fail;
        rehash;
        return 0
      else
        tce-load -wi $1 2>&1 >/dev/null && _done || _fail;
        rehash;
        return 0;
      fi
    elif os_openwrt; then
      $sudo opkg update && opkg install $1 && _done || _fail;
      return 0;
    else OS NOT SUPPORTED; _fail; return 1; fi;fi;}

[ -n "OZH_REQUIRE" ] && _apt
