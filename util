#!/bin/sh

_copyright(){ echo "
  ozh lightweight shell extensions
  2008-2014 - anx @ ulzq de (Sebastian Glaser)
  Licensed under GNU GPL v3"; }
_license(){ echo "
  ozh is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2, or (at your option)
  any later version.

  ozh is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this software; see the file COPYING.  If not, write to
  the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
  Boston, MA 02111-1307 USA

  http://www.gnu.org/licenses/gpl.html"; }

alias rot13="tr a-zA-Z n-za-mN-ZA-M"

wkill(){
  local HELP="$(_${0}_help)"
  local VER=false
  while [ $# -gt 0 ]; do
    case "$1" in
    "-h") mcred $HELP;mbr;return 0;;
    "-v") VER=true;shift;;
       *) PID="$1";shift;;
    esac
  done
  if [ -z "$PID" ]; then mcred $HELP;mbr;return 1;fi
  if $VER; then mcyellow "wkill $PID... ";fi
  while ps ax -o pid | sed 's/ //' | sed 's/$/:/' | sed 's/^/:/' | grep -q ":$1:"; do
    if $VER; then mcyellow ".";fi
    kill -9 $PID >/dev/null 2>&1
    sleep 0.05
  done
  if $VER; then mcgreen done;mbr;fi; }
_wkill_help(){ echo "kill and wait for PID\n  usage: wkill [-v] PID"; }

wpid(){
  local HELP="$(_${0}_help)"
  local PID=$$
  local TO=1
  local START=$(date +%s)
  local INT=$
  local VER=false
  while [ $# -gt 0 ]; do
    case "$1" in
    "-h") mcred $HELP;mbr;return 0;;
    "-v") VER=true;shift;;
    "-t") TO=$2;shift 2;;
       *) PID="$1";shift;;
    esac
  done
  if [ -z "$PID" ]; then mcred $HELP;mbr;return 1;fi
  if $VER; then mcyellow "wpid($TO, $PID): ";fi
  while ps ax -o pid | sed 's/ //g' | sed 's/$/:/' | sed 's/^/:/' | grep -q ":$PID:"; do
    if $VER; then mcyellow ".";fi
    sleep 0.1
    if [ $(date +%s) -gt $(($START + $TO)) ]; then
      if $VER; then mcred fail;mbr;fi
      return 1;
    fi
  done
  if $VER; then mcgreen done;mbr;fi
  return 0; }
_wpid_help(){ echo "wait for PID to finish\n  usage: wpid [-v] [-t TIMEOUT in s] PID"; }

stopwatch(){
  b=$(date +%s)
  echo -ne "\nPress:\t\"Enter\" to show meantime\n\t\"Strg + C\" to abort\n\n"
  while true; do
      n=$(date +%s)
      d=$(($n - $b))
      m=$(($d / 60))
      s=$(($d % 60))
      echo -ne "Time elapsed: $m:`printf %02d $s`\r"
      sleep .1
  done; }

rmcaps(){ DISPLAY=:0 xmodmap -e "remove lock = Caps_Lock"; }
_rmcaps_help(){ echo "remove capslock from xmodmap"; }

waitfor(){ return "$(wpid $@)"; }
_waitfor_help(){ _wpid_help; }

blink_hdd(){
  f=/tmp/$(whoami)-hddblin
  touch $f
  case "$1" in
  start)
    _blink_hdd_start $f &;;
  stop)
    rm $f;
    rm "$f.k";;
  esac; }
_blink_hdd_help(){ echo "[start,stop] spawns/kills hdd blinker. Uses sync so use with caution."; }

_blink_hdd_start(){
   f=$1
   while [ -f $f ]; do
     echo "l" > "$f.k";sync;sleep 0.7;
   done; }
_blink_hdd_start_help(){ echo "do not invoke directly. use blink_hdd instead."; }

wgz(){ wget -q0 - "$1" | tar zxvf -; }
_wgz_help(){ echo "wget and gunzip"; }

wbz(){ wget -q0 - "$1" | tar jxvf -; }
_wbz_help(){ echo "wget and bunzip";}

rpw(){
  test -z "$1" && n=8 || n=$1
  strings /dev/urandom | grep -o '[[:alnum:]][[:punct:]]'|head -n $1 | tr -d '\n'; }
_rpw_help(){ echo "[1:length(default:8)] generate random password"; }

ltrim(){ echo "$@"|sed -e 's/^\s*//'; }
_ltrim_help(){ echo "[1:string] remove spaces on left"; }

ftr(){ mv $1 $(echo $1| tr "$2" "$3" ); }
_ftr_help(){ echo "[1:file 2:needle 3:replace] 'tr-moves' file"; }

mvtolower(){ for i in * ; do mv $i $(echo $i | tr '[A-Z]' '[a-z]') ; done; }
_mvtolower_help(){ echo "move all filenames to lower case in $PWD"; }

ops(){ grep $2 $1 | cut -c2-18 | uniq -c; }
_ops_help(){ echo "[1:file 2:needle] shows original occurences of needle"; }

mtop(){ busybox top -bmn1 | busybox awk '
  BEGIN{c='$([ -z "$1" ] && echo 3 || echo $1)';getline;gsub(/[[:alpha:]]|:/,"");t=$1;getline;getline}
  (/[ ]+?[0-9]+/){for(i=0;i<c;i++)if($4>m[i]){m[i+2]=m[i+1];m[i+1]=m[i];m[i]=$4;n[i+2]=n[i+1];n[i+1]=n[i];
    sub(/}/,"",$9); sub(/{.*[:\.]/,"",$9);
    n[i]=$9;break}}
  END{for(i=0;i<c;i++)printf "%0.1f %s\n",m[i]/t*100,n[i];}'; }
_mtop_help(){ echo "show top [1:count=3] mem-using processes"; }

sortlines(){ cat - | awk '{print length"\t"$0}'|sort -n|cut -f 2 -; }
_sortlines_help(){ echo "Sort STDIN by lines"; }

strPad(){ WIDTH=$1; shift; printf "%-${WIDTH}.${WIDTH}s" "$*"; }
_strPad_help(){ echo "pad a string with spaces using ptintf - #1:width"; }

random(){
  if [ ! `expr $1 + 1 2> /dev/null` ]; then a=1; else a=$1; fi
  if [ ! `expr $2 + 1 2> /dev/null` ]; then b=65535; else b=$2; fi
  echo $(($(cat /dev/urandom| grep -aoP '[0-9]' | tr -d "\n" | head -c 3) % $2 + $1 )); }
_random_help(){ echo "random number bewtween #1 and #2"; }

newscript(){
  echo creating new script $1 in $HOME/bin/$1
  mkdir -p $HOME/bin;echo -e "#!/bin/sh\n" > $HOME/bin/$1;chmod 750 $HOME/bin/$1
  vim $HOME/bin/$1;
  rehash 2>/dev/null; }
_newscript_help(){ echo "[1:(file)name] creates a new script in $HOME/bin with name"; }

toscript(){
  echo "creating new script $1 from STDIN in $HOME/bin/$1" >&2
  mkdir -p $HOME/bin;echo -e "#!/bin/sh" > $HOME/bin/$1;chmod 750 $HOME/bin/$1
  cat - >> $HOME/bin/$1; rehash 2>/dev/null; }
_toscript_help(){ echo "[1:(file)name] redirects stdin to $HOME/bin/name"; }

edtoscript(){
  toscript $@
  $EDITOR $1
  rehash 2>/dev/null; }
_edtoscript_help(){ echo "[1:(file)name] redirects stdin to $HOME/bin/name and opens it in $EDITOR"; }

sedit(){ if [ -f $(which $1) ]; then vim $(which $1); else newscript $1; fi; }
_sedit_help(){ echo "[1:filename] looks for filename in path or $HOME/bin and opens it in vim"; }

ddv() dd bs=4096000 if=$1 of=/dev/stdout | pv > $2; }
_ddv_help() echo "verbose dd with progressbar";; }

ddvz() dd bs=4096000 if=$1 of=/dev/stdout | bzip2 | pv > $2; }
_ddvz_help() echo "verbose dd with progressbar and bzip2 output"; }
